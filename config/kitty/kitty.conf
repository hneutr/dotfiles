# vim:fileencoding=utf-8:ft=conf
font_family      SF Mono
italic_font      auto
bold_font        auto
bold_italic_font auto

font_size        13.0

font_size_delta 1

adjust_line_height -5

box_drawing_scale 0.001, 1, 1.5, 2

foreground       #839496

background       #002b36

selection_foreground #93a1a1

selection_background #073642

url_color #0087BD

cursor           #cccccc

cursor_shape     block

cursor_blink_interval     0

# Stop blinking cursor after the specified number of seconds of keyboard inactivity. Set to
# zero to never stop blinking.
cursor_stop_blinking_after 15.0

# Number of lines of history to keep in memory for scrolling back
scrollback_lines 2000

# Program with which to view scrollback in a new window. The scrollback buffer is passed as
# STDIN to this program. If you change it, make sure the program you use can
# handle ANSI escape sequences for colors and text formatting.
scrollback_pager less +G -R

# When viewing scrollback in a new window, put it in a new tab as well
scrollback_in_new_tab no

# Wheel scroll multiplier (modify the amount scrolled by the mouse wheel). Use negative
# numbers to change scroll direction.
wheel_scroll_multiplier 5.0

# The interval between successive clicks to detect double/triple clicks (in seconds)
click_interval 0.5

# Characters considered part of a word when double clicking. In addition to these characters
# any character that is marked as an alpha-numeric character in the unicode
# database will be matched.
select_by_word_characters :@-./_~?&=%+#

# Hide mouse cursor after the specified number of seconds of the mouse not being used. Set to
# zero to disable mouse cursor hiding.
mouse_hide_wait 3.0

# Set the active window to the window under the mouse when moving the mouse around
focus_follows_mouse no

# The enabled window layouts. A comma separated list of layout names. The special value * means
# all layouts. The first listed layout will be used as the startup layout.
# For a list of available layouts, see the file layouts.py
enabled_layouts *

# If enabled, the window size will be remembered so that new instances of kitty will have the same
# size as the previous instance. If disabled, the window will initially have size configured
# by initial_window_width/height, in pixels.
remember_window_size   yes
initial_window_width   640
initial_window_height  400

# Delay (in milliseconds) between screen updates. Decreasing it, increases
# frames-per-second (FPS) at the cost of more CPU usage. The default value
# yields ~100 FPS which is more than sufficient for most uses.
repaint_delay    10

# Delay (in milliseconds) before input from the program running in the terminal
# is processed. Note that decreasing it will increase responsiveness, but also
# increase CPU usage and might cause flicker in full screen programs that
# redraw the entire screen on each loop, because kitty is so fast that partial
# screen updates will be drawn.
input_delay 3

# Visual bell duration. Flash the screen when a bell occurs for the specified number of
# seconds. Set to zero to disable.
visual_bell_duration 0.0

# Enable/disable the audio bell. Useful in environments that require silence.
enable_audio_bell yes

# The modifier keys to press when clicking with the mouse on URLs to open the URL
open_url_modifiers ctrl+shift

# The program with which to open URLs that are clicked on. The special value "default" means to
# use the operating system's default URL handler.
open_url_with default

# Choose whether to use the system implementation of wcwidth() (used to
# control how many cells a character is rendered in).  If you use the system
# implementation, then kitty and any programs running in it will agree. The
# problem is that system implementations often are based on outdated unicode
# standards and get the width of many characters, such as emoji, wrong. So if
# you are using kitty with programs that have their own up-to-date wcwidth()
# implementation, set this option to no.
use_system_wcwidth no

# The value of the TERM environment variable to set
term xterm-kitty

# The width (in pts) of window borders. Will be rounded to the nearest number of pixels based on screen resolution.
# Note that borders are displayed only when more than one window is visible. They are meant to separate multiple windows.
window_border_width 1

# The window margin (in pts) (blank area outside the border)
window_margin_width 0

# The window padding (in pts) (blank area between the text and the window border)
window_padding_width 0

# The color for the border of the active window
active_border_color #00ff00

# The color for the border of inactive windows
inactive_border_color #cccccc

# Tab-bar colors
active_tab_foreground #000
active_tab_background #eee
inactive_tab_foreground #444
inactive_tab_background #999


# The 16 terminal colors. There are 8 basic colors, each color has a dull and
# bright version.

# black
color0   #073642
color8   #002b36

# red
color1   #dc322f
color9   #cb4b16

# green
color2   #859900
color10  #586e75

# yellow
color3   #b58900
color11  #657b83

# blue
color4  #268bd2
color12 #839496

# magenta
color5   #d33682
color13  #6c71c4

# cyan
color6   #2aa198
color14  #93a1a1

# white
color7   #839496
color15  #fdf6e3


# Key mapping
# For a list of key names, see: http://www.glfw.org/docs/latest/group__keys.html
# For a list of modifier names, see: http://www.glfw.org/docs/latest/group__mods.html
# 
# You can use the special action no_op to unmap a keyboard shortcut that is
# assigned in the default configuration.
# 
# You can combine multiple actions to be triggered by a single shortcut, using the
# syntax below:
# map key combine <separator> action1 <separator> action2 <separator> action3 ...
# For example:
# map ctrl+shift+e combine : new_window : next_layout
# this will create a new window and switch to the next available layout

# Clipboard (macOS)
map super+v             paste_from_clipboard
map super+c             copy_to_clipboard

map shift+insert        paste_from_selection
# You can also pass the contents of the current selection to any program using
# pass_selection_to_program. By default, the system's open program is used, but
# you can specify your own, for example:
# map ctrl+shift+o      pass_selection_to_program firefox
map ctrl+shift+o        pass_selection_to_program 

# Window management (macOS)
map super+n             new_window
map super+t             new_window
map super+shift+[       previous_window
map super+shift+]       next_window
map super+w             close_window
map super+1             first_window
map super+2             second_window
map super+3             third_window
map super+4             fourth_window
map super+5             fifth_window
map super+6             sixth_window
map super+7             seventh_window
map super+8             eighth_window
map super+9             ninth_window

# You can also open a new window running an arbitrary program, for example:
# map ctrl+shift+y      new_window mutt
# You can also pass the current selection to the new program by using the @selection placeholder
# map ctrl+shift+y      new_window less @selection
# Finally, you can even send the contents of the current screen + history buffer as stdin using
# the placeholders @text (which is the plain text) and @ansi (which includes text styling escape codes)
# For example, the following command opens the scrollback buffer in less in a new window.
# map ctrl+shift+y      new_window @ansi less +G -R


# Tab management
# map ctrl+shift+right    next_tab
# map ctrl+shift+left     previous_tab
# map ctrl+shift+t        new_tab
# map ctrl+shift+q        close_tab
# map ctrl+shift+l        next_layout
# map ctrl+shift+.        move_tab_forward
# map ctrl+shift+,        move_tab_backward
# Just as with new_window above, you can also pass the name of arbitrary
# commands to run when using new_tab.

# Miscellaneous
map super+equal          restore_font_size
map super+shift+equal    increase_font_size
map super+shift+minus    decrease_font_size

# Sending arbitrary text on shortcut key presses
# You can tell kitty to send arbitrary (UTF-8) encoded text to
# the client program when pressing specified shortcut keys. For example:
# send_text all ctrl+alt+a Special text
# This will send "Special text" when you press the Ctrl+Alt+a key combination.
# The text to be sent is a python string literal so you can use escapes like
# \x1b to send control codes or \u21fb to send unicode characters (or you can
# just input the unicode characters directly as UTF-8 text). The first argument
# to send_text is the keyboard modes in which to activate the shortcut. The possible
# values are normal or application or kitty or a comma separated combination of them.
# The special keyword all means all modes. The modes normal and application refer to
# the DECCKM cursor key mode for terminals, and kitty refers to the special kitty
# extended keyboard protocol. Another example, that outputs a word and then moves the cursor
# to the start of the line (same as pressing the Home key):
# send_text normal ctrl+alt+a Word\x1b[H
# send_text application ctrl+alt+a Word\x1bOH

# Symbol mapping (special font for specified unicode code points). Map the
# specified unicode codepoints to a particular font. Useful if you need special
# rendering for some symbols, such as for Powerline. Avoids the need for
# patched fonts. Each unicode code point is specified in the form U+<code point
# in hexadecimal>. You can specify multiple code points, separated by commas
# and ranges separated by hyphens. symbol_map itself can be specified multiple times.
# Syntax is:
# 
# symbol_map codepoints Font Family Name
# 
# For example:
# 
# symbol_map U+E0A0-U+E0A2,U+E0B0-U+E0B3 PowerlineSymbols


# OS specific tweaks

# Hide the kitty window's title bar on macOS.
macos_hide_titlebar no

# Use the option key as an alt key. With this set to no, kitty will use 
# the macOS native Option+Key = unicode character behavior. This will
# break any Alt+key keyboard shortcuts in your terminal programs, but you
# can use the macOS unicode input technique.
macos_option_as_alt yes

# The number is a percentage of maximum volume.
# See man XBell for details.
x11_bell_volume 80

# Prefer color emoji fonts when available. Note that this only works
# on systems such as Linux that use fontconfig. On other OSes, the emoji
# font used is system dependent. It can be overriden using symbol_map in the kitty
# configuration.
prefer_color_emoji yes
