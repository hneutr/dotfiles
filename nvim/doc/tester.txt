*tester.txt* A Plugin to facilitate switching between a test file and the file 
to be tested.

The basic idea is that if you are working on a file (the 'primary' file) and it
has a test file, you should be able to switch between those files with ease.

================================================================================
CONTENTS                                                       *tester-contents*

    1. Configuration                                      |tester-configuration|
    2. Interface                                              |tester-interface|
    3. Example Configuration                                   |tester-examples|
    4. Future Work                                          |tester-future-work|

================================================================================
Section 1: Configuration                                  *tester-configuration*

The interface of this plugin is exposed through the g:tester object.

The following variables can be set to control this plugin's configuration:

g:tester.file_info
  Explanation:
      A dictionary where the keys are filetypes and the values are dictionaries 
      with information about the test modules for that file
      type. 
  Example Settings:
      {
          'perl' : {
              'suffix' : '_Test',
          },
      },
  Currently Supported Keys:
      - 'suffix'

g:tester.display_mode
  Explanation:
      The default display mode for the g:tester.OpenPairedFile method.
  Example Settings:
      a string. One of:
          'sp' || 'vs' || 'tabfind'

================================================================================
Section 2: Interface                                          *tester-interface*

The only currently exposed function is g:tester.OpenPairedFile, which opens in a
split or tab (depending on the value of g:tester.display_mode) the test file (if
you are in the 'primary' file) or the 'primary' file (if you are in the test 
file)

g:tester.OpenPairedFile(...)
  Explanation:
      attempts to open the test file paired with the current file (if in a
      non-test file) or the 'real' file (if in the test file).
  Parameters:
      displaymode:
          optional. defaults to 'sp'
          allowed:  'sp' || 'vs' || 'tabfind'

================================================================================
Section 2: Example Configuration                   *tester-examples*

let g:tester = {
    \'file_types' : {
        \'python' : {
            \'suffix' : '.test',
        \},
        \'perl' : {
            \'suffix' : '_Test',
        \},
        \'javascript' : {
            \'suffix' : '.t',
        \},
    \},
    \'display_mode' : 'sp',
\}

nnoremap <leader>t :<c-u>call g:tester.OpenPairedFile(vs)<cr>
nnoremap <leader>T :<c-u>call g:tester.OpenPairedFile(sp)<cr>
nnoremap <leader><c-t> :<c-u>call g:tester.OpenPairedFile(tabfind)<cr>

================================================================================
Section 3: Future Work                          *tester-future-work*

The following will (hopefully) be developed in the future:
1. Support different types of mappings to/from test files.
    - directory mappings (things in _this_ directory have test files
    in _that_ directory)
    - file to file (_this_ file maps to _that_ file)
2. Scoping of different types of mappings
    - look for a file-to-file mapping first, then a directory 
    mapping, then a language mapping
