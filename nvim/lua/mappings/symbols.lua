local greek = {
    -- lowercase
    ["a"] = "α",
    ["b"] = "β",
    ["d"] = "δ",
    ["e"] = "ε",
    ["g"] = "γ",
    ["h"] = "η",
    ["i"] = "ι",
    ["k"] = "κ",
    ["l"] = "λ",
    ["m"] = "μ",
    ["n"] = "ν",
    ["o"] = "ω",
    ["pi"] = "π",
    ["ph"] = "φ",
    ["ps"] = "ψ",
    ["pp"] = "ρ",
    ["s"] = "σ",
    ["?"] = "ς",
    ["ta"] = "τ",
    ["th"] = "θ",
    ["u"] = "υ",
    ["xi"] = "ξ",
    ["xx"] = "χ",
    ["z"] = "ζ",
    -- uppercase
    ["D"] = "Δ",
    ["G"] = "Γ",
    ["L"] = "Λ",
    ["O"] = "Ω",
    ["PI"] = "Π",
    ["PH"] = "Φ",
    ["PS"] = "Ψ",
    ["S"] = "Σ",
    ["TH"] = "Θ",
    ["XI"] = "Ξ",
}

local superscripts = {
    ["+"] = "⁺",
    ["-"] = "⁻",
    ["="] = "⁼",
    ["("] = "⁽",
    [")"] = "⁾",
    ["0"] = "⁰",
    ["1"] = "¹",
    ["2"] = "²",
    ["3"] = "³",
    ["4"] = "⁴",
    ["5"] = "⁵",
    ["6"] = "⁶",
    ["7"] = "⁷",
    ["8"] = "⁸",
    ["9"] = "⁹",

    ["a"] = "ᵃ",
    ["b"] = "ᵇ",
    ["c"] = "ᶜ",
    ["d"] = "ᵈ",
    ["e"] = "ᵉ",
    ["f"] = "ᶠ",
    ["g"] = "ᵍ",
    ["h"] = "ʰ",
    ["i"] = "ⁱ",
    ["j"] = "ʲ",
    ["k"] = "ᵏ",
    ["l"] = "ˡ",
    ["m"] = "ᵐ",
    ["n"] = "ⁿ",
    ["o"] = "ᵒ",
    ["p"] = "ᵖ",
    ["r"] = "ʳ",
    ["s"] = "ˢ",
    ["t"] = "ᵗ",
    ["u"] = "ᵘ",
    ["v"] = "ᵛ",
    ["w"] = "ʷ",
    ["x"] = "ˣ",
    ["y"] = "ʸ",
    ["z"] = "ᶻ",

    ["A"] = "ᴬ",
    ["B"] = "ᴮ",
    ["D"] = "ᴰ",
    ["E"] = "ᴱ",
    ["G"] = "ᴳ",
    ["H"] = "ᴴ",
    ["I"] = "ᴵ",
    ["J"] = "ᴶ",
    ["K"] = "ᴷ",
    ["L"] = "ᴸ",
    ["M"] = "ᴹ",
    ["N"] = "ᴺ",
    ["O"] = "ᴼ",
    ["P"] = "ᴾ",
    ["R"] = "ᴿ",
    ["T"] = "ᵀ",
    ["U"] = "ᵁ",
    ["V"] = "ⱽ",
    ["W"] = "ᵂ",

    ["@"] = "ᵅ",
}

local subscripts = {
    ["0"] = "₀",
    ["1"] = "₁",
    ["2"] = "₂",
    ["3"] = "₃",
    ["4"] = "₄",
    ["5"] = "₅",
    ["6"] = "₆",
    ["7"] = "₇",
    ["8"] = "₈",
    ["9"] = "₉",
    ["+"] = "₊",
    ["-"] = "₋",
    ["="] = "₌",
    ["("] = "₍",
    [")"] = "₎",
    ["a"] = "ₐ",
    ["b"] = "ᵦ",
    ["e"] = "ₑ",
    ["h"] = "ₕ",
    ["i"] = "ᵢ",
    ["j"] = "ⱼ",
    ["k"] = "ₖ",
    ["l"] = "ₗ",
    ["m"] = "ₘ",
    ["n"] = "ₙ",
    ["o"] = "ₒ",
    ["p"] = "ₚ",
    ["r"] = "ᵣ",
    ["s"] = "ₛ",
    ["t"] = "ₜ",
    ["u"] = "ᵤ",
    ["v"] = "ᵥ",
    ["x"] = "ₓ",
}

local logic = {
    ["+"] = "⊹",
    ["~"] = "≃",
    ["^"] = "∧",
    ["@"] = "⊙",
    ["l"] = "◀",
    ["n"] = "¬",
    ["d"] = "∇",
    ["r"] = "▶",
    ["s"] = "∮",
    ["t"] = {
        ["h"] = "⊣",
        ["j"] = "⊤",
        ["k"] = "⊥",
        ["l"] = "⊢",
    },
    ["T"] = {
        ["l"] = "⊨",
        ["h"] = "⫤",
    },
    ["u"] = {
        ["h"] = "⊃",
        ["j"] = "⋂",
        ["k"] = "⋃",
        ["l"] = "⊂",
        ["."] = {
            ["h"] = "⪾",
            ["j"] = "⩀",
            ["k"] = "⊍",
            ["l"] = "⪽",
        }
    },
    ["#"] = "⊡",
    [")"] = "⟌",
    ["."] = "⋯",
    ["|"] = "⋮",
    ["/"] = "⋰",
    ["\\"] = "⋱",
    [":"] = "≔",
}

-- lowercase = shape
-- uppercase = hollow shape
local shapes = {
    -- triangle
    ["t"] = {
        ["h"] = "◀",
        ["j"] = "▼",
        ["k"] = "▲",
        ["l"] = "▶",
    },
    ["T"] = {
        ["h"] = "◁",
        ["j"] = "▽",
        ["k"] = "△",
        ["l"] = "▷",
    },
    -- diamond
    ["d"] = "◆",
    ["D"] = "◇",
    -- circle
    ["c"] = "●",
    ["C"] = "○",
}

local doublestruck = {
    -- lowercase
    a = "𝕒",
    b = "𝕓",
    c = "𝕔",
    d = "𝕕",
    e = "𝕖",
    f = "𝕗",
    g = "𝕘",
    h = "𝕙",
    i = "𝕚",
    j = "𝕛",
    k = "𝕜",
    l = "𝕝",
    m = "𝕞",
    n = "𝕟",
    o = "𝕠",
    p = "𝕡",
    q = "𝕢",
    r = "𝕣",
    s = "𝕤",
    t = "𝕥",
    u = "𝕦",
    v = "𝕧",
    w = "𝕨",
    x = "𝕩",
    y = "𝕪",
    z = "𝕫",
    -- uppercase
    A = "𝔸",
    B = "𝔹",
    C = "ℂ",
    D = "𝔻",
    E = "𝔼",
    F = "𝔽",
    G = "𝔾",
    H = "ℍ",
    I = "𝕀",
    J = "𝕁",
    K = "𝕂",
    L = "𝕃",
    M = "𝕄",
    N = "ℕ",
    O = "𝕆",
    P = "ℙ",
    Q = "ℚ",
    R = "ℝ",
    S = "𝕊",
    T = "𝕋",
    U = "𝕌",
    V = "𝕍",
    W = "𝕎",
    X = "𝕏",
    Y = "𝕐",
    Z = "ℤ",
}

local arrows = {
    h = "←",
    j = "↓",
    k = "↑",
    l = "→",
    d = {
        tl = "↖",
        tr = "↗",
        bl = "↙",
        br = "↘",
    },
    ["2"] = {
        rl = "↔",
        ud = "↕",
    },
}

local symbols_map = {
    -----------------------------[ lowercase letters ]------------------------------
    ["a"] = arrows,
    ["d"] = doublestruck,
    ["e"] = "∈",
    ["f"] = "𝕗",
    ["g"] = greek,
    ["s"] = shapes,
    ["x"] = "⨯",

    -----------------------------[ uppercase letters ]------------------------------
    ["A"] = "Ɐ",
    ["E"] = "Ǝ",
    ["M"] = "ꟽ",
    ["P"] = "ꟼ",

    ----------------------------------[ numbers ]-----------------------------------
    ["8"] = "∞",
    ["0"] = "°",

    ----------------------------------[ symbols ]-----------------------------------
    ['-'] = "—",
    ["="] = "≠",
    ["<"] = "≤",
    [">"] = "≥",
    ["."] = "∅",
    ['^'] = superscripts,
    ['&'] = subscripts,
    ['?'] = logic,

    -----------------------------------[ arrows ]-----------------------------------
    ["Left"] = "←",
    ["Right"] = "→",
    ["Up"] = "↑",
    ["Down"] = "↓",
}
-- `⇠ ⇥ ⟴  ⤏  ⤳ ⭇ ⭈`
-- ~ `⊕ ⦵ ⌾ ⌽ ⍜ ◍ ￮ ⏁ ⏂ ○ ◌ ◯ ⚬ ⨷ `

function get_nested_mapping(key, val)
    prefix = prefix or ""

    local mappings = {}
    if type(val) == "string" then
        table.insert(mappings, {key, val})
        mappings[key] = val
    else
        for suffix, subval in pairs(val) do
            for _, submapping in ipairs(get_nested_mapping(key .. suffix, subval)) do
                table.insert(mappings, submapping)
            end
        end
    end

    return mappings
end

local symbols = {}
for key, val in pairs(symbols_map) do
    local lhs = "<" .. vim.g.symbol_insert_modifier .. "-" .. key .. ">"

    for _, mapping in ipairs(get_nested_mapping(lhs, val)) do
        table.insert(symbols, mapping)
    end
end

return symbols
